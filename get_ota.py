# -*- coding: utf-8 -*-
#https://github.com/flying1008
# Form implementation generated from reading ui file 'f:\pythons\get_ota.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import requests
import urllib
import json
import os
import base64
import hashlib
import datetime
import time
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject , pyqtSignal,QThread
from PyQt5.QtWidgets import QMessageBox,QWidget

class WorkThread(QThread):
    # 自定义信号对象。参数str就代表这个信号可以传一个字符串
    trigger = pyqtSignal(str)

    def __int__(self):
        # 初始化函数
        self.working = True
        self.model=""
        self.channel=""
        self.version=""    
        self.range_ver="" 
    
    def stop(self):
        #线程状态改变与线程终止
        self.working = False
        self.wait()
        self.trigger.emit("已停止!")

    def run(self):
        print(self.model)
        print(self.channel)
        print(self.version)
        if len(self.model) == 0 or (len(self.version) == 0 and len(self.range_ver) == 0):
            self.trigger.emit("型号和版本号不能为空")
            return
        if self.channel not in ['stable', 'current', 'release']:
            self.trigger.emit("channel不正确!")
            return
        if len(self.version) > 0 and len(self.range_ver) > 0:
            self.get_ota_info(self.model, self.channel, self.version)
        elif len(self.version) == 0 and len(self.range_ver) > 0:
            self.version_range(self.model, self.channel, self.range_ver)
        else:
            self.get_ota_info(self.model, self.channel, self.version)

    def version_range(self,model,channel,version):
        vec = version.split('.')
        for v2 in range(int(vec[1]),150):
            for v3 in range(int(vec[2]),200):
                diff_ver = vec[0]+"."+str(v2) + "."+str(v3)
                print(diff_ver)
                if self.working == True:
                    self.get_ota_info(model,channel,diff_ver)
                else:
                    self.trigger.emit("已停止!")
                    return

    def get_ota_info(self,model,channel,version):
        #self.trigger.emit("")
        
        t = time.time()
        current_time=int(round(t * 1000))
        request ='?model={0}&version={1}&channel={2}&filterID=&locale=zh_CN&time={3}&s='.format(model,version,channel,current_time)
        salt='channel={0}&filterID=&locale=zh_CN&model={1}&time={2}&version={3}&8007236f-a2d6-4847-ac83-c49395ad6d65'.format(channel,model,current_time,version)
        bytes_request=salt.encode("utf-8")
        base_request=base64.b64encode(bytes_request)
        final_s=hashlib.md5(base_request).hexdigest().upper()
        url='http://api.miwifi.com/rs/grayupgrade/v2/'
        url= url+model +request + final_s
        req =  urllib.request.Request(url)

        rsp = urllib.request.urlopen(req)

        file_name = model +"_"+ channel+"_"+ "version.txt"
        if rsp.getcode() == 200:
            result = rsp.read().decode('utf-8')
            json_format=json.loads(result)
            if json_format.get('data') is not  None and  len(json.dumps(json_format.get('data'),indent=2,ensure_ascii=False)) > 2:
                file = open(file_name,"a+")
                print(json.dumps(json_format.get('data'),indent=2,ensure_ascii=False)) 
                if json_format.get('data').get("currentInfo") is not None :
                    releaseDate = (json_format.get('data').get("currentInfo"))["releaseDate"]               
                    timeArray = time.localtime(int(releaseDate)/1000)
                    otherStyleTime = time.strftime("%Y-%m-%d %H:%M:%S", timeArray)
                    (json_format.get('data').get("currentInfo"))["releaseDate"] = otherStyleTime
                if json_format.get('data').get("upgradeInfo") is not None :
                    releaseDate = (json_format.get('data').get("upgradeInfo"))["releaseDate"]
                    timeArray = time.localtime(int(releaseDate)/1000)  
                    otherStyleTime = time.strftime("%Y-%m-%d %H:%M:%S", timeArray)
                    (json_format.get('data').get("upgradeInfo"))["releaseDate"] = otherStyleTime
                self.trigger.emit(json.dumps(json_format.get('data'),indent=2,ensure_ascii=False))   
                time.sleep(0.5)   
                file.write(version)
                file.write("\n")
                file.write(json.dumps(json_format.get('data'),indent=2,ensure_ascii=False))
                file.write("\n")
                file.close()
            else:
                msg = "未查询到{"+ version + "}的包"
                self.trigger.emit(msg)
        else:
            self.trigger.emit("获取失败，请检查参数")


class Ui_mainWindow():
    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(793, 560)
        mainWindow.setUnifiedTitleAndToolBarOnMac(True)
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 40, 91, 21))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(50, 80, 91, 21))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(50, 120, 91, 21))
        self.label_3.setObjectName("label_3")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(110, 40, 113, 21))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(110, 120, 113, 21))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(160, 240, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(70, 280, 661, 220))
        self.textEdit.setObjectName("textEdit")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(270, 40, 261, 16))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(270, 80, 461, 16))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(270, 120, 151, 16))
        self.label_6.setObjectName("label_6")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(110, 80, 111, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(50, 160, 61, 16))
        self.label_7.setObjectName("label_7")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(110, 160, 113, 21))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(270, 160, 271, 20))
        self.label_8.setObjectName("label_8")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(300, 240, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(90, 200, 431, 16))
        self.label_9.setObjectName("label_9")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(440, 240, 93, 28))
        self.pushButton_3.setObjectName("pushButton_3")
        mainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "升级包获取工具"))
        self.label.setText(_translate("mainWindow", "型号:"))
        self.label_2.setText(_translate("mainWindow", "频道:"))
        self.label_3.setText(_translate("mainWindow", "指定版本:"))
        self.pushButton.setText(_translate("mainWindow", "提交"))
        self.label_4.setText(_translate("mainWindow", "型号如:lx04、x08a、x08c、x08e等"))
        self.label_5.setText(_translate("mainWindow", "channel如:stable(开发版)、current(测试版)、release（稳定版）"))
        self.label_6.setText(_translate("mainWindow", "版本号如:1.26.103"))
        self.comboBox.setItemText(0, _translate("mainWindow", "stable"))
        self.comboBox.setItemText(1, _translate("mainWindow", "current"))
        self.comboBox.setItemText(2, _translate("mainWindow", "release"))
        self.label_7.setText(_translate("mainWindow", "起始版本:"))
        self.label_8.setText(_translate("mainWindow", "将执行遍历，输出到文件version.txt中"))
        self.pushButton_2.setText(_translate("mainWindow", "重置"))
        self.label_9.setText(_translate("mainWindow", "注意:当指定版本和起始版本都填写时，默认获取指定版本"))
        self.pushButton_3.setText(_translate("mainWindow", "停止"))

        self.work = WorkThread()
        self.work.trigger.connect(self.set_text)
        self.pushButton_2.clicked.connect(self.reset_text)
        self.pushButton.clicked.connect(self.get_base_info)
        self.pushButton_3.clicked.connect(self.stop_thread)

    def stop_thread(self):
        self.work.stop()

    def reset_text(self):
        self.lineEdit.clear()
        self.lineEdit_3.clear()
        self.lineEdit_4.clear()
        self.textEdit.clear()

    def get_base_info(self):
        model =self.lineEdit.text()
        channel = self.comboBox.currentText()
        version = self.lineEdit_3.text()
        range_ver = self.lineEdit_4.text()
        self.work.model=model
        self.work.channel=channel
        self.work.version=version
        self.work.range_ver=range_ver
        file_name = model +"_"+ channel+"_"+ "version.txt"
        if os.path.exists(file_name):
            try:
                os.remove(file_name)
            except:
                w = QtWidgets.QWidget()
                QMessageBox.information(w,"提示","写入文件失败，请稍后再试",QMessageBox.Yes)
                return
        self.work.working = True
        self.work.start()

    def set_text(self,str):
        self.textEdit.setText(str)

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    window = QtWidgets.QMainWindow()
    ui = Ui_mainWindow()
    ui.setupUi(window)
    window.show()
    sys.exit(app.exec_())
